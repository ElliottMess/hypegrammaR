variable_type("consent")
data.dependent.var = "modality"
variable_type(data.dependent.var)
independent.var = "idp.ref"
variable_type(data.dependent.var, independent.var)
####################
# run once
####################
# install.packages("data.table")
.install_reachR(T, branch = "develop")
source("./scripts/dependencies.R")
source("./scripts/analyse_indicator.R")
source("./scripts/map_scales.R")
source("./scripts/stats.R")
source("./scripts/plots.R")
library(reachR)
#install.packages("bit64")
library(bit64)
library(data.table)
require(survey)
options(survey.lonely.psu = "average")
# ALWAYS (or never?) use the reachR load functions. otherwise nothing matches anymore because we harmonise colnames internally
data<- load_data(file = "./data/kri_winter.csv")
data %>% glimpse
populations<-load_samplingframe("./data/kri_winter_weights.csv",
sampling.frame.population.column="population",
sampling.frame.stratum.column = "group",
data.stratum.column = "group", return.stratum.populations = T)
questionnaire <- load_questionnaire(data = "./data/kri_winter.csv",
questions.file = "./data/questions_kri_winter.csv",
choices.file = "./data/choices_kri_winter.csv",
choices.label.column.to.use = "english")
dependent.var = "modality"
independent.var = "idp.ref"
variable.type <- paste0(variable_type(dependent.var), variable.type(independent.var), sep ="_")
reachR:::variable.type <- paste0(variable_type(dependent.var), variable.type(independent.var), sep ="_")
variable.type <- paste0(reachR:::variable_type(dependent.var), reachR:::variable.type(independent.var), sep ="_")
variable.type <- paste0(reachR:::variable_type(dependent.var), reachR:::variable_type(independent.var), sep ="_")
variable.type <- paste0(reachR:::variable_type(dependent.var), "_", reachR:::variable_type(independent.var), sep ="_")
choose.test <- function(hypothesis.type = hypothesis.type,
data = data,
dependent.var = dependent.var,
independent.var = independent.var,
paired = NULL) {
variable.type <- paste0(reachR:::variable_type(dependent.var), "_", reachR:::variable_type(independent.var))
typestring <- paste(c("TYPE",hypothesis.type,variable.type, paired), collapse = "_")
TYPE_group_difference_categorical_categorical <- hypothesis_test_chisquare
#TYPE_group_difference_numeric_categorical <- hypothesis_test_difference_in_means
#TYPE_limit_numeric <- hypothesis_test_one_sample_z_num
#TYPE_limit_categorical <- hypothesis_test_one_sample_z_cat
return(get(typestring)) }
choose.test(hypothesis.type, data, dependent.var, independent.var)
hypothesis.type="difference_in_groups"
choose.test(hypothesis.type, data, dependent.var, independent.var)
hypothesis_test_chisquare <- function(dependent.var, independent.var, design){
do.a.chi.sq(independent.var = independent.var, dependent.var = dependent.var, design = design)
table.of.data(independent.var = independent.var, dependent.var = dependent.var, design = design)
}
choose.test(hypothesis.type, data, dependent.var, independent.var)
choose.test <- function(hypothesis.type = hypothesis.type,
data = data,
dependent.var = dependent.var,
independent.var = independent.var,
paired = NULL) {
variable.type <- paste0(reachR:::variable_type(dependent.var), "_", reachR:::variable_type(independent.var))
typestring <- paste(c("TYPE",hypothesis.type,variable.type, paired), collapse = "_")
TYPE_group_difference_categorical_categorical <- hypothesis_test_chisquare
#TYPE_group_difference_numeric_categorical <- hypothesis_test_difference_in_means
#TYPE_limit_numeric <- hypothesis_test_one_sample_z_num
#TYPE_limit_categorical <- hypothesis_test_one_sample_z_cat
return(get(typestring)) }
choose.test(hypothesis.type, data, dependent.var, independent.var)
TYPE_difference_in_groups_categorical_categorical <- hypothesis_test_chisquare
choose.test <- function(hypothesis.type = hypothesis.type,
data = data,
dependent.var = dependent.var,
independent.var = independent.var,
paired = NULL) {
variable.type <- paste0(reachR:::variable_type(dependent.var), "_", reachR:::variable_type(independent.var))
typestring <- paste(c("TYPE",hypothesis.type,variable.type, paired), collapse = "_")
TYPE_difference_in_groups_categorical_categorical <- hypothesis_test_chisquare
#TYPE_group_difference_numeric_categorical <- hypothesis_test_difference_in_means
#TYPE_limit_numeric <- hypothesis_test_one_sample_z_num
#TYPE_limit_categorical <- hypothesis_test_one_sample_z_cat
return(get(typestring)) }
choose.test(hypothesis.type, data, dependent.var, independent.var)
test.analysis <- choose.test(hypothesis.type, data, dependent.var, independent.var)
View(test.analysis)
View(test.analysis)
do.a.chi.sq <- function(independent.var = independent.var,
dependent.var = data.dependent.var,
design,
na.rm = TRUE){
formula_string<-paste0("~",independent.var, "+", dependent.var)
chisq <- svychisq (formula(formula_string), design, na.rm = TRUE)
results$test.results <- c(chisq$statistic, chisq$p.value)
results$test.parameters <- c(chisq$parameter, chisq$method)
return(results)
}
table.of.data <- function(independent.var = independent.var,
dependent.var = data.dependent.var,
design,
na.rm = TRUE){
formula_string<-paste0("~",independent.var, "+", dependent.var)
f.table <- svytable(formula(formula_string), design)
formula_err <- paste0("~", dependent.var, sep = "")
by <- paste0(" ~", independent.var, sep = "")
error_bars <- svyby(formula(formula_err), formula(by), design, na.rm = T, svymean)
names_df <- sapply(rownames(f.table), paste0, colnames(f.table))
results$names <- c(names_df[,1], names_df[,2])
results$numbers <- as.numeric(c(prop.table(f.table, 1)[1,], prop.table(f.table, 1)[2,]))
results$se <- as.numeric(c(error_bars[,grep("se.", names(error_bars))][1,], error_bars[,grep("se.", names(error_bars))][2,]))
results$min <- results$numbers - results$se
results$max <- results$numbers + results$se
return(results)
}
test.analysis <- choose.test(hypothesis.type, data, dependent.var, independent.var)
analyse_indicator<-function(data, dependent.var, independent.var = NULL, hypothesis.type, do.for.each.unique.value.in.var = NULL){
results <- list()
data <- data[!is.na(dependent.var),]
data <- data[!(dependent.var %in% c("NA", "N/A")),]
if(nrow(data)==0){stop('dependent var is all NA')
test.analysis <- choose.test(hypothesis.type, data, dependent.var, independent.var)
return(results)}
analyse_indicator<-function(data, dependent.var, independent.var = NULL, hypothesis.type, design, do.for.each.unique.value.in.var = NULL){
results <- list()
data <- data[!is.na(dependent.var),]
data <- data[!(dependent.var %in% c("NA", "N/A")),]
if(nrow(data)==0){stop('dependent var is all NA')
test.analysis <- choose.test(hypothesis.type, data, dependent.var, independent.var)
return(results)}
analyse_indicator(data, dependent.var, independent.var, hypothesis.type, design)
# select methods
variable_weights <- reachR:::weights_of(data)
design <- svydesign(ids =~1,
strata = strata_of(data),
weights = variable_weights %>% as.vector,
data = data)
# what if there's more than 1 independent var?
# doesn't work currently. When we build it out, I suppose it would be indep 1,2,...
# WHAT HAPPENS IF DATA TYPE CANT BE DETERMINED? - IF FOR ONE VARIABLE BOTH GO TO FALSE? -> currently it returns as if only
# one var was supplied  that's no good.
# it should guess the data type from the data, and throw a warning if: missmatch with questionnaire or if: not found in questionnaire.
# this is a bit dangerous if people have numbers with text ("unknown", "no data" or something) in some values  etc..
# maybe we have to supply this as a parameter...
#I've added ... to allow for future arguments like 2 independent vars
stat.test <- choose.test(hypothesis.type = hypothesis.type, variable.types = variable.type.s)
choose.test <- function(hypothesis.type = hypothesis.type,
data = data,
dependent.var = dependent.var,
independent.var = independent.var,
paired = NULL) {
variable.type <- paste0(reachR:::variable_type(dependent.var), "_", reachR:::variable_type(independent.var))
typestring <- paste(c("TYPE",hypothesis.type,variable.type, paired), collapse = "_")
TYPE_difference_in_groups_categorical_categorical <- hypothesis_test_chisquare
#TYPE_group_difference_numeric_categorical <- hypothesis_test_difference_in_means
#TYPE_limit_numeric <- hypothesis_test_one_sample_z_num
#TYPE_limit_categorical <- hypothesis_test_one_sample_z_cat
return(get(typestring)) }
choose.test(hypothesis.type, data, dependent.var, independent.var)
hypothesis_test_chisquare <- function(dependent.var, independent.var, design){
do.a.chi.sq(independent.var = independent.var, dependent.var = dependent.var, design = design)
table.of.data(independent.var = independent.var, dependent.var = dependent.var, design = design)
}
stat.test(dependentvar = dependent.var,independent = independent.var,design = )
# results need to be stored in a variable
#giving some summary statistics
# design<-make.svydesign()
# mean <- svymean(data[[dependentvar]], design, na.rm = T)
stat.test.result <- stat.test(....,.....)
}
analyse_indicator<-function(data, dependent.var, independent.var = NULL, hypothesis.type, design, do.for.each.unique.value.in.var = NULL){
results <- list()
data <- data[!is.na(dependent.var),]
data <- data[!(dependent.var %in% c("NA", "N/A")),]
if(nrow(data)==0){stop('dependent var is all NA')
test.analysis <- choose.test(hypothesis.type, data, dependent.var, independent.var)
return(results)}}
analyse_indicator<-function(data, dependent.var, independent.var = NULL, hypothesis.type, design, do.for.each.unique.value.in.var = NULL){
results <- list()
data <- data[!is.na(dependent.var),]
data <- data[!(dependent.var %in% c("NA", "N/A")),]
if(nrow(data)==0){stop('dependent var is all NA')
test.analysis <- choose.test(hypothesis.type, data, dependent.var, independent.var)
return(results)}}
}}}}
analyse_indicator<-function(data, dependent.var, independent.var = NULL, hypothesis.type, design, do.for.each.unique.value.in.var = NULL){
results <- list()
data <- data[!is.na(dependent.var),]
data <- data[!(dependent.var %in% c("NA", "N/A")),]
if(nrow(data)==0){stop('dependent var is all NA')}
test.analysis <- choose.test(hypothesis.type, data, dependent.var, independent.var)
return(results)}
analyse_indicator(data, dependent.var, independent.var, hypothesis.type, design)
choose.test(hypothesis.type, data, dependent.var, independent.var)
hypothesis_test_chisquare <- function(dependent.var, independent.var, design){
do.a.chi.sq(independent.var = independent.var, dependent.var = dependent.var, design = design)
table.of.data(independent.var = independent.var, dependent.var = dependent.var, design = design)
return(results)
}
analyse_indicator(data, dependent.var, independent.var, hypothesis.type, design)
analyse_indicator<-function(data, dependent.var, independent.var = NULL, hypothesis.type, design, do.for.each.unique.value.in.var = NULL){
results <- list()
data <- data[!is.na(dependent.var),]
data <- data[!(dependent.var %in% c("NA", "N/A")),]
if(nrow(data)==0){stop('dependent var is all NA')}
test.analysis <- choose.test(hypothesis.type, data, dependent.var, independent.var)
return(results)}
analyse_indicator(data, dependent.var, independent.var, hypothesis.type, design)
choose.test(hypothesis.type, data, dependent.var, independent.var)
test.analysis(dependent.var,independent.var, design)
design <- svydesign(ids =~1,
strata = data$group,
weights = variable_weights %>% as.vector,
data = data)
# select methods
variable_weights <- reachR:::weights_of(data)
debug(weights_of)
debug(reachR:::weights_of)
# select methods
variable_weights <- reachR:::weights_of(data)
debug(reachR:::weights_of_internal)
# select methods
variable_weights <- reachR:::weights_of(data)
reachR:::stratify.count.sample
sample.counts <- stratify.count.sample(data.strata = df[[data.stratum.column]],
sf.strata = population.counts)
samplecounts <- table(data.strata)
data.stratum.column
df[[data.stratum.column]]
data.strata = df[[data.stratum.column]]
data.strata %>% table
data <- data[!(data$group == "#N/A"),]
data <- data[!(data$group == "#N/A"),]
# select methods
variable_weights <- reachR:::weights_of(data)
undebug(reachR:::weights_of_internal)
# select methods
variable_weights <- reachR:::weights_of(data)
debug(reacHR:::weights_of)
debug(reachR:::weights_of)
undebug(reachR:::weights_of)
design <- svydesign(ids =~1,
strata = data$group,
weights = variable_weights %>% as.vector,
data = data)
undebug(reachR:::weights_of)
# select methods
variable_weights <- reachR:::weights_of(data)
design <- svydesign(ids =~1,
strata = data$group,
weights = variable_weights %>% as.vector,
data = data)
analyse_indicator(data, dependent.var, independent.var, hypothesis.type, design)
test.analysis <- choose.test(hypothesis.type, data, dependent.var, independent.var)
test.analysis(dependent.var,independent.var, design)
hypothesis_test_chisquare <- function(dependent.var, independent.var, design){
results <- list()
do.a.chi.sq(independent.var = independent.var, dependent.var = dependent.var, design = design)
table.of.data(independent.var = independent.var, dependent.var = dependent.var, design = design)
return(results)
}
test.analysis(dependent.var,independent.var, design)
debug(do.a.chi.sq)
test.analysis(dependent.var,independent.var, design)
View(test.analysis)
choose.test(hypothesis.type, data, dependent.var, independent.var)
choose.test <- function(hypothesis.type = hypothesis.type,
data = data,
dependent.var = dependent.var,
independent.var = independent.var,
paired = NULL) {
variable.type <- paste0(reachR:::variable_type(dependent.var), "_", reachR:::variable_type(independent.var))
typestring <- paste(c("TYPE",hypothesis.type,variable.type, paired), collapse = "_")
TYPE_difference_in_groups_categorical_categorical <- hypothesis_test_chisquare
#TYPE_group_difference_numeric_categorical <- hypothesis_test_difference_in_means
#TYPE_limit_numeric <- hypothesis_test_one_sample_z_num
#TYPE_limit_categorical <- hypothesis_test_one_sample_z_cat
return(typestring) }
choose.test(hypothesis.type, data, dependent.var, independent.var)
choose.test <- function(hypothesis.type = hypothesis.type,
data = data,
dependent.var = dependent.var,
independent.var = independent.var,
paired = NULL) {
variable.type <- paste0(reachR:::variable_type(dependent.var), "_", reachR:::variable_type(independent.var))
typestring <- paste(c("TYPE",hypothesis.type,variable.type, paired), collapse = "_")
TYPE_difference_in_groups_categorical_categorical <- hypothesis_test_chisquare
#TYPE_group_difference_numeric_categorical <- hypothesis_test_difference_in_means
#TYPE_limit_numeric <- hypothesis_test_one_sample_z_num
#TYPE_limit_categorical <- hypothesis_test_one_sample_z_cat
return(get(typestring)) }
do.a.chi.sq <- function(independent.var = independent.var,
dependent.var = data.dependent.var,
design,
na.rm = TRUE){
formula_string<-paste0("~",independent.var, "+", dependent.var)
chisq <- svychisq (formula(formula_string), design, na.rm = TRUE)
results$test.results <- c(chisq$statistic, chisq$p.value)
results$test.parameters <- c(chisq$parameter, chisq$method)
return(results)
}
do.a.chi.sq(independent.var = independent.var, dependent.var = dependent.var, design = design)
results <- list()
do.a.chi.sq(independent.var = independent.var, dependent.var = dependent.var, design = design)
table.of.data(independent.var = independent.var, dependent.var = dependent.var, design = design)
hypothesis_test_chisquare <- function(dependent.var, independent.var, design){
results <- list()
do.a.chi.sq(independent.var = independent.var, dependent.var = dependent.var, design = design)
table.of.data(independent.var = independent.var, dependent.var = dependent.var, design = design)
return(results)
}
hypothesis_test_chisquare(dependent.var, independent.var, design)
hypothesis_test_chisquare <- function(dependent.var, independent.var, design){
results <- list()
chisq.results <- do.a.chi.sq(independent.var = independent.var, dependent.var = dependent.var, design = design)
table.results <- table.of.data(independent.var = independent.var, dependent.var = dependent.var, design = design)
results <- list(chisq.results, table.results)
return(results)}
hypothesis_test_chisquare(dependent.var, independent.var, design)
analyse_indicator(data, dependent.var, independent.var, hypothesis.type, design)
choose.test(hypothesis.type, data, dependent.var, independent.var)
test.analysis(dependent.var,independent.var, design)
analyse_indicator<-function(data, dependent.var, independent.var = NULL, hypothesis.type, design, do.for.each.unique.value.in.var = NULL){
data <- data[!is.na(dependent.var),]
data <- data[!(dependent.var %in% c("NA", "N/A")),]
if(nrow(data)==0){stop('dependent var is all NA')}
test.analysis <- choose.test(hypothesis.type, data, dependent.var, independent.var)
test.analysis(dependent.var,independent.var, design)
return(results)}
analyse_indicator(data, dependent.var, independent.var, hypothesis.type, design)
choose.test(hypothesis.type, data, dependent.var, independent.var)
test.analysis
funa<-function(x,y,z){
Iminvisible <- x-y
return(z)
}
funa(10,5,7)
t.test
table.of.data
a<-1
a<-1
funa<-function(x,y,z){
a<-2
Iminvisible <- x-y
return(z)
}
funa(10,5,7)
a
a<-1
funa<-function(x,y,z){
a<-2
Iminvisible <- x-y
return(z)
}
funa(10,5,7)
a
asdf<-1
funa<-function(x,y,z){
asdf<-2
Iminvisible <- x-y
return(z)
}
funa(10,5,7)
a
asdf
z
funa(10,5,7)
funa(10,5,7)
mean
mean(c(1,2,3))
results
funa<-function(x,y,z){
asdf<-2
Iminvisible <- x-y
return(mean)
}
funa<-function(x,y,z){
asdf<-2
Iminvisible <- x-y
return(mean)
}
funby<- function(a,b){
return( b(a) )
}
funb<- function(a,b){
return( b(a) )
}
funb(c(1,2,3),mean)
function(x){mean(x)*100000}
funa<-function(x,y,z){
asdf<-2
Iminvisible <- x-y
return(
function(x){mean(x)*100000}
)
}
funb<- function(a,b){
return( b(a) )
}
funa<-function(x,y,z){
asdf<-2
Iminvisible <- x-y
return(
function(x){mean(x)*100000}
)
}
mynewf<-funa(1,2,3)
funb(c(1,2,3),mynewf)
mynewf(c(1,2,3))
funb<- function(a,b){
return( b(a)/10000000 )
}
choose.test(hypothesis.type, data, dependent.var, independent.var)
choose.test
test.analysis(dependent.var,independent.var, design)
test.analysis
test.analysis <- choose.test(hypothesis.type, data, dependent.var, independent.var)
test.analysis
choose.test(hypothesis.type, data, dependent.var, independent.var)
test.analysis <- choose.test(hypothesis.type, data, dependent.var, independent.var)
test.analysis
test.analysis(dependent.var,independent.var, design)
3
results
analyse_indicator<-function(data, dependent.var, independent.var = NULL, hypothesis.type, design, do.for.each.unique.value.in.var = NULL){
data <- data[!is.na(dependent.var),]
data <- data[!(dependent.var %in% c("NA", "N/A")),]
if(nrow(data)==0){stop('dependent var is all NA')}
test.analysis <- choose.test(hypothesis.type, data, dependent.var, independent.var)
results<-test.analysis(dependent.var,independent.var, design)
return(results)
}
analyse_indicator(data, dependent.var, independent.var, hypothesis.type, design)
results
results<-"HALLO ICH BIN GLOBAL SPACE RESULTS"
analyse_indicator<-function(data, dependent.var, independent.var = NULL, hypothesis.type, design, do.for.each.unique.value.in.var = NULL){
if(nrow(data)==0){stop('dependent var is all NA')}
test.analysis <- choose.test(hypothesis.type, data, dependent.var, independent.var)
results<-test.analysis(dependent.var,independent.var, design)
return(results)
}
analyse_indicator(data, dependent.var, independent.var, hypothesis.type, design)
results
analyse_indicator(data, dependent.var, independent.var, hypothesis.type, design)
analyse_indicator<-function(data, dependent.var, independent.var = NULL, hypothesis.type, design, do.for.each.unique.value.in.var = NULL){
if(nrow(data)==0){stop('dependent var is all NA')}
test.analysis <- choose.test(hypothesis.type, data, dependent.var, independent.var)
results<-test.analysis(dependent.var,independent.var, design)
return(results)
barplot(numbers)
}
analyse_indicator(data, dependent.var, independent.var, hypothesis.type, design)
numbers
analyse_indicator<-function(data, dependent.var, independent.var = NULL, hypothesis.type, design, do.for.each.unique.value.in.var = NULL){
if(nrow(data)==0){stop('dependent var is all NA')}
test.analysis <- choose.test(hypothesis.type, data, dependent.var, independent.var)
results<-test.analysis(dependent.var,independent.var, design)
return(results)
barplot(results$numbers)
}
analyse_indicator(data, dependent.var, independent.var, hypothesis.type, design)
if(nrow(data)==0){stop('dependent var is all NA')}
test.analysis <- choose.test(hypothesis.type, data, dependent.var, independent.var)
results<-test.analysis(dependent.var,independent.var, design)
analyse_indicator<-function(data, dependent.var, independent.var = NULL, hypothesis.type, design, do.for.each.unique.value.in.var = NULL){
if(nrow(data)==0){stop('dependent var is all NA')}
test.analysis <- choose.test(hypothesis.type, data, dependent.var, independent.var)
results<-test.analysis(dependent.var,independent.var, design)
return(results)
barplot(results$numbers)
aes-f-lkdéasfkàéasfk
}
analyse_indicator(data, dependent.var, independent.var, hypothesis.type, design)
analyse_indicator<-function(data, dependent.var, independent.var = NULL, hypothesis.type, design, do.for.each.unique.value.in.var = NULL){
if(nrow(data)==0){stop('dependent var is all NA')}
test.analysis <- choose.test(hypothesis.type, data, dependent.var, independent.var)
results<-test.analysis(dependent.var,independent.var, design)
barplot(results$numbers)
return(results)
}
analyse_indicator(data, dependent.var, independent.var, hypothesis.type, design)
results$numbers
test.analysis <- choose.test(hypothesis.type, data, dependent.var, independent.var)
results<-test.analysis(dependent.var,independent.var, design)
results
percent_with_confints <- function(independent.var = independent.var,
dependent.var = data.dependent.var,
design,
na.rm = TRUE){
formula_string<-paste0("~",independent.var, "+", dependent.var)
f.table <- svytable(formula(formula_string), design)
formula_err <- paste0("~", dependent.var, sep = "")
by <- paste0(" ~", independent.var, sep = "")
error_bars <- svyby(formula(formula_err), formula(by), design, na.rm = T, svymean)
names_df <- sapply(rownames(f.table), paste0, colnames(f.table))
results$names <- c(names_df[,1], names_df[,2])
results$numbers <- as.numeric(c(prop.table(f.table, 1)[1,], prop.table(f.table, 1)[2,]))
results$se <- as.numeric(c(error_bars[,grep("se.", names(error_bars))][1,], error_bars[,grep("se.", names(error_bars))][2,]))
results$min <- results$numbers - results$se
results$max <- results$numbers + results$se
return(results)
}
test.analysis
chisq <- svychisq(formula(formula_string), design, na.rm = TRUE)
formula_string<-paste0("~",dependent.var, "+",independent.var)
formula_string_revers<-paste0("~",independent.var, "+",dependent.var)
chisq <- svychisq(formula(formula_string), design, na.rm = TRUE)
chisq
chisq$statistic
chisq$observed
chisq$stdres

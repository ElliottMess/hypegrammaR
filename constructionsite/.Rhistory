table(list(datasp$inside_admin,datasp$4enu.id))
table(list(datasp$inside_admin,datasp[["4enu.id"]]))
(list(datasp$inside_admin,datasp[["4enu.id"]]))
(data.frame(datasp$inside_admin,datasp[["4enu.id"]]))
(data.frame(datasp$inside_admin,datasp[["4enu.id"]])) %>% table
(data.frame(datasp$inside_admin,datasp[["4enu.id"]])) %>% table %>% barplot
(data.frame(datasp$inside_admin,datasp[["4enu.id"]])) %>% table %>% t %>% barplot
(data.frame(datasp$inside_admin,datasp[["4enu.id"]])) %>% table %>% barplot
(data.frame(datasp$inside_admin,datasp[["4enu.id"]])) %>% table %>% (reachR:::percent) %>% barplot
(data.frame(datasp$inside_admin,datasp[["4enu.id"]])) %>% table %>% (reachR:::table.to.data.frame)
(data.frame(datasp$inside_admin,datasp[["4enu.id"]])) %>% table %>% (reachR:::table.to.data.frame) %>% t
countinoutbyenum<-(data.frame(datasp$inside_admin,datasp[["4enu.id"]])) %>% table %>% (reachR:::table.to.data.frame) %>% t
apply(countinoutbyenum,1,(reachR:::percent))
apply(countinoutbyenum,1,(reachR:::percent)) %>% (function(x){paste(round(x*100),"%")})
(function(x){paste(round(x*100),"%")})
apply(countinoutbyenum,1,(reachR:::percent)) %>% barplot
apply(countinoutbyenum,1,(reachR:::percent)) %>% barplot(.[,1])
apply(countinoutbyenum,1,(reachR:::percent)) %>% .[,1]
apply(countinoutbyenum,1,(reachR:::percent))
apply(countinoutbyenum,1,(reachR:::percent)) %>% t %>% .[,1]
apply(countinoutbyenum,1,(reachR:::percent)) %>% t %>% .[,1] %>% barplot
apply(countinoutbyenum,1,(reachR:::percent)) %>% t %>% .[,1] %>% sort %>% barplot
apply(countinoutbyenum,1,(reachR:::percent)) %>% t %>% .[,1] %>% sort %>% barplot(title="% collection outside camp boundary")
apply(countinoutbyenum,1,(reachR:::percent)) %>% t %>% .[,1] %>% sort %>% barplot(title="% collection outside camp boundary")
apply(countinoutbyenum,1,(reachR:::percent)) %>% t %>% .[,1] %>% sort %>% barplot(main="% collection outside camp boundary")
apply(countinoutbyenum,1,(reachR:::percent)) %>% t %>% .[,1] %>% sort %>% barplot(main="% collection outside camp boundary by enumerator ID")
?plot
countinoutbyenum<-apply(countinoutbyenum,1,(reachR:::percent)) %>% t %>% .[,1] %>% sort
barplot(ountinoutbyenum, main="% collection outside camp boundary by enumerator ID")
countinoutbyenum<-(data.frame(datasp$inside_admin,datasp[["4enu.id"]])) %>% table %>% (reachR:::table.to.data.frame) %>% t
countinoutbyenum<-apply(countinoutbyenum,1,(reachR:::percent)) %>% t %>% .[,1] %>% sort
barplot(countinoutbyenum, main="% collection outside camp boundary by enumerator ID")
axis(1, at= 1:length(countinoutbyenum), labels=names(ountinoutbyenum)
axis(1, at= 1:length(countinoutbyenum), labels=names(ountinoutbyenum)
)
axis(1, at= 1:length(countinoutbyenum), labels=names(countinoutbyenum)
)
countinoutbyenum<-(data.frame(datasp$inside_admin,datasp[["4enu.id"]])) %>% table %>% (reachR:::table.to.data.frame) %>% t
countinoutbyenum<-apply(countinoutbyenum,1,(reachR:::percent)) %>% t %>% .[,1] %>% sort
barplot(countinoutbyenum, main="% collection outside camp boundary by enumerator ID",las=2)
plot(admin[[1]],col="#AAAAAA",border="#FFFFFF")
points(datasp[datasp$inside_admin==1,],pch=20,col="#00000022",cex=0.1)
points(datasp[datasp$inside_admin==0,],pch=20,col="#FF0000",cex=0.1)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list = ls())
getwd()
source("./scripts/data_check.R")
require("reachR")
parameters<-list()
require(reachR)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list = ls())
getwd()
source("./scripts/data_check.R")
require("reachR")
########################
########################
# PARAMETERS
########################
########################
parameters<-list()
########################
# FILES AND COLUMN NAMES
########################
# meta
parameters$RCID <- "SYR1705" # the reserach cycle ID
parameters$name<-"Raqqa ABA" # name of the project
# input files
########################
parameters$cleaning_log_available = TRUE
parameters$stratified<-FALSE
# WHERE IS THE DATA, AND WHAT ARE THE NAMES OF THE RELEVANT COLUMNS?
parameters$data_file<-"./data/data.csv"
parameters$data.uuid.column.name<-"meta/instanceID"
# cleaninglog
########################
# IS THERE A CLEANING LOG, WHERE IS IT AND WHAT ARE THE NAMES OF THE RELEVANT COLUMNS?
parameters$cleaning_log_file = "./data/cleaninglog.csv"
parameters$cleaning.log.uuid.column = "meta/instanceID"
parameters$cleaning.log.new.value.column = "new value"
parameters$cleaning.log.variable.column = "question"
# samplingframe
########################
# IS THIS STRATIFIED? IF YES, WHERE'S THE SAMPLING FRAME AND WHAT ARE THE NAMES OF THE RELEVANT COLUMNS?
# Only needed if stratified = TRUE:
# parameters$sampling.frame.file = "./data/samplingframe.csv"
# parameters$sampling.frame.population.column = "population"
# parameters$sampling.frame.stratum.column = "stratum"
# parameters$data.stratum.column = "stratum"
########################
# WHAT ANALYSIS NEEDED?
########################
# global aggregates?
parameters$do_global_counts<-T
parameters$do_global_percent<-T
parameters$do_global_median<-F
# local aggregates?
parameters$do_disaggregated_counts<-F
parameters$do_disaggregated_percent<-F
parameters$disaggregate_by<-"G1_BASIC_INFO/Q1_6_Neighbourhood_of_knowledge"
########################
########################
# CUSTOM ANALYSIS
########################
########################
parameters$custom_analysis<-function(data){
}
########################
########################
# let's go!
########################
#######################
validate(parameters)
# make sure this works again when you start the next day (don't assume commands from other files have been run), e.g this one
# set wd to this script's folder
rm(list = ls())
this_script_path<-(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(this_script_path)
getwd()
# make sure this works again when you start the next day (don't assume commands from other files have been run), e.g this one
# set wd to this script's folder
rm(list = ls())
this_script_path<-(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(this_script_path)
getwd()
source("./dependencies.R")
library(reachR)
require(survey)
#load input
data<- reachR:::read.csv.auto.sep(file = "./IRQ_CCCM.csv")
#load sampling frame
# samplingframe<- reachR:::read.csv.auto.sep(file = "sf.csv")
populations<-load_samplingframe("./sf.csv",
sampling.frame.population.column="Population",
sampling.frame.stratum.column = "Camp_",
data.stratum.column = "overview/camp_name", return.stratum.populations = T)
#load questionnaire
questionnaire <- load_questionnaire(data, questions.file = "./questionscomma2.csv", choices.file = "./choices.csv", choices.label.column.to.use = "english")
#load sampling frame
# samplingframe<- reachR:::read.csv.auto.sep(file = "sf.csv")
read.csv("sf.csv")
fread("sf.csv")
populations<-load_samplingframe("./sf.csv",
sampling.frame.population.column="Population",
sampling.frame.stratum.column = "Camp_",
data.stratum.column = "overview/camp_name", return.stratum.populations = T)
#load sampling frame
# samplingframe<- reachR:::read.csv.auto.sep(file = "sf.csv")
read.csv("questionscomma2.csv")
#load sampling frame
# samplingframe<- reachR:::read.csv.auto.sep(file = "sf.csv")
read.csv2("questionscomma2.csv")
#load sampling frame
# samplingframe<- reachR:::read.csv.auto.sep(file = "sf.csv")
reachR:::read.csv.auto.sep("questionscomma2.csv")
#load sampling frame
# samplingframe<- reachR:::read.csv.auto.sep(file = "sf.csv")
reachR:::read.csv.auto.sep("questionscomma2.csv",stringsAsFactors = F)
#load sampling frame
# samplingframe<- reachR:::read.csv.auto.sep(file = "sf.csv")
reachR:::read.csv.auto.sep("questionscomma2.csv",stringsAsFactors =TF)
#load questionnaire
questionnaire <- load_questionnaire(data, questions.file = "./questionscomma2.csv", choices.file = "./choices.csv", choices.label.column.to.use = "english")
#load questionnaire
debug( load_questionnaire)
questionnaire <- load_questionnaire(data, questions.file = "./questionscomma2.csv", choices.file = "./choices.csv", choices.label.column.to.use = "english")
questions.file
read.csv.auto.sep(questions.file)
read.csv.auto.sep(questions.file,stringsAsFactors = F)
read.csv.auto.sep(questions.file,stringsAsFactors = F,header=T)
choices.file
read.csv("choices.csv")
read.csv2(choices.file)
read.csv.auto.sep(choices.file)
questionnaire <- load_questionnaire(data, questions.file = "./questionscomma2.csv", choices.file = "./choices3.csv", choices.label.column.to.use = "english")
#load questionnaire
undebug( load_questionnaire)
questionnaire <- load_questionnaire(data, questions.file = "./questionscomma2.csv", choices.file = "./choices3.csv", choices.label.column.to.use = "english")
?fread
#load questionnaire
questionnaire <- load_questionnaire(data, questions.file = "./questionscomma2.csv", choices.file = "./choices2.csv", choices.label.column.to.use = "english")
#some sanity checks
names(read.csv("./questions.csv", stringsAsFactors = F, header= T))
#some sanity checks
names(read.csv("./questionscomma2.csv", stringsAsFactors = F, header= T))
#checking which question names made it through
questions <- questionnaire[[1]]
questions$name
#checking which question names made it through
questionnaire$questions %>% head
#load questionnaire
questionnaire <- load_questionnaire(data, questions.file = "./questionscomma2.csv", choices.file = "./choices2.csv", choices.label.column.to.use = "english")
reachR:::read.csv.auto.sep("quesitonscomma2.csv")
reachR:::read.csv.auto.sep("questionscomma2.csv")
qraw<-reachR:::read.csv.auto.sep("questionscomma2.csv")
qraw %>% glimpse
#load input
data<- reachR:::read.csv.auto.sep(file = "./IRQ_CCCM.csv")
names(data)
#load input
data<- reachR:::read.csv.auto.sep(file = "./reach_som_protection_assessment_hh_cleaneddata_feb_2018.csv")
populations<-load_samplingframe("./sf.csv",
sampling.frame.population.column="Population",
sampling.frame.stratum.column = "Camp_",
data.stratum.column = "overview/camp_name", return.stratum.populations = T)
#load questionnaire
questionnaire <- load_questionnaire(data, questions.file = "./questionscomma2.csv", choices.file = "./choices2.csv", choices.label.column.to.use = "english")
qraw<-reachR:::read.csv.auto.sep("questionscomma2.csv")
qraw %>% glimpse
names(data) %>% paste(collapse = "\n")
names(data) %>% paste(collapse = "\n") %>% cat
length(questionnaire$questions$name %>% hasdata)/length(questionnaire$name)
length(questionnaire$questions$name %>% hasdata)/length(questionnaire$questions$name)
#checking which question names made it through
questionnaire$questions %>% head
data.dependent.var = "hh_profile/hhh_age"
independent.var = "settlement"
data.dependent.var = "what.region.is.the.assessment.being.conducted.in."
independent.var = "what.is.the.gender.of.the.respondent"
hypothesis.type="direct_reporting"
find.data.types(data.dependent.var)
find.data.types <- function(data.dependent.var, independent.var = NULL) {
data.type.dep = c()
data.type.indep = c()
if(question_is_categorical(data.dependent.var) == T){
data.type.dep = "categorical"
}
if(question_is_numeric(data.dependent.var) == T){
data.type.dep = "numeric"
}
if(question_is_categorical(independent.var) == T){
data.type.indep = "categorical"
}
if(question_is_numeric(independent.var) == T){
data.type.indep = "numeric"
}
variable.types <- paste(data.type.dep, data.type.indep, sep="_")
return(variable.types)
}
find.data.types(data.dependent.var)
find.data.types <- function(data.dependent.var, independent.var = NULL) {
data.type.dep = c()
data.type.indep = c()
if(question_is_categorical(data.dependent.var) == T){
data.type.dep = "categorical"
}
if(question_is_numeric(data.dependent.var) == T){
data.type.dep = "numeric"
}
if(question_is_categorical(independent.var) == T){
data.type.indep = "categorical"
}
if(question_is_numeric(independent.var) == T){
data.type.indep = "numeric"
}
variable.types <- paste(data.type.dep, data.type.indep, collapse="_")
return(variable.types)
}
find.data.types(data.dependent.var)
find.data.types <- function(data.dependent.var, independent.var = NULL) {
data.type.dep = c()
data.type.indep = c()
if(question_is_categorical(data.dependent.var) == T){
data.type.dep = "categorical"
}
if(question_is_numeric(data.dependent.var) == T){
data.type.dep = "numeric"
}
if(question_is_categorical(independent.var) == T){
data.type.indep = "categorical"
}
if(question_is_numeric(independent.var) == T){
data.type.indep = "numeric"
}
variable.types <- paste0(data.type.dep, data.type.indep, collapse="_")
return(variable.types)
}
find.data.types(data.dependent.var)
find.data.types(data.dependent.var = data.dependent.var)
find.data.types(data.dependent.var = data.dependent.var,independent.var = independent.var)
independent.var
find.data.types(data.dependent.var = data.dependent.var,independent.var = independent.var)
find.data.types <- function(data.dependent.var, independent.var = NULL) {
data.type.dep = c()
data.type.indep = c()
if(question_is_categorical(data.dependent.var) == T){
data.type.dep = "categorical"
}
if(question_is_numeric(data.dependent.var) == T){
data.type.dep = "numeric"
}
if(question_is_categorical(independent.var) == T){
data.type.indep = "categorical"
}
if(question_is_numeric(independent.var) == T){
data.type.indep = "numeric"
}
# fixed the underscore etc. issue
variable.types <- paste0(c(data.type.dep, data.type.indep), collapse="_")
return(variable.types)
}
find.data.types <- function(data.dependent.var, independent.var = NULL) {
data.type.dep = c()
data.type.indep = c()
if(question_is_categorical(data.dependent.var) == T){
data.type.dep = "categorical"
}
if(question_is_numeric(data.dependent.var) == T){
data.type.dep = "numeric"
}
if(question_is_categorical(independent.var) == T){
data.type.indep = "categorical"
}
if(question_is_numeric(independent.var) == T){
data.type.indep = "numeric"
}
# fixed the underscore etc. issue
variable.types <- paste(c(data.type.dep, data.type.indep), collapse="_")
return(variable.types)
}
find.data.types(data.dependent.var = data.dependent.var,independent.var = independent.var)
debug(find.data.types)
find.data.types(data.dependent.var = data.dependent.var,independent.var = independent.var)
data.type.dep
data.type.indep
question_is_categorical(independent.var)
independent.var
"what.is.the.gender.of.the.respondent" %in% questionnaire$questions$name
questionnaire$questions$name
#seperate cases
data$`overview/camp_name`
#seperate cases
data$`overview.camp.name`
strata_of<-function(data){
return(data[,"overview/camp_name"])
}
analyse_indicator<-function(data, dependent.var, independent.var = NULL, hypothesis.type, do.for.each.unique.value.in.var = NULL){
data <- data[!is.na(dependent.var),]
if(nrow(data)==0){stop('dependent var is all NA')}
# select methods
variable_weights <- reachR:::weights_of(data)
design <- svydesign(ids =~1,
strata = strata_of(data),
weights = variable_weights %>% as.vector,
data = data)
variable.types<-find.data.types(dependent.var, independent.var)
stat.test <- choose.test(hypothesis.type = hypothesis.type, variable.types = variable.type)
stat.test(dependentvar = dependent.var,independent = independent.var,design = )
type_independent <- reachR:::question_is_categorical_internal(dependent.var)
#giving some summary statistics
# design<-make.svydesign()
mean <- svymean(data[[dependentvar]], design, na.rm = T)
stat.test.result <- stat.test(....,.....)
}
data <- data[!is.na(dependent.var),]
source("./dependencies.R")
library(reachR)
require(survey)
#load input
data<- reachR:::read.csv.auto.sep(file = "./reach_som_protection_assessment_hh_cleaneddata_feb_2018.csv")
#load sampling frame
# samplingframe<- reachR:::read.csv.auto.sep(file = "sf.csv")
populations<-load_samplingframe("./sf.csv",
sampling.frame.population.column="Population",
sampling.frame.stratum.column = "Camp_",
data.stratum.column = "overview/camp_name", return.stratum.populations = T)
#load questionnaire
questionnaire <- load_questionnaire(data, questions.file = "./questionscomma2.csv", choices.file = "./choices2.csv", choices.label.column.to.use = "english")
length(questionnaire$questions$name %>% hasdata)/length(questionnaire$questions$name)
length(questionnaire$questions$name %>% hasdata)/length(questionnaire$questions$name)*100 %>% round
length(questionnaire$questions$name %>% hasdata)/length(questionnaire$questions$name)*100 %>% (round)
(length(questionnaire$questions$name %>% hasdata)/length(questionnaire$questions$name)*100) %>% round
(length(questionnaire$questions$name %>% hasdata)/length(questionnaire$questions$name)*100) %>% round %>% paste("% questions matched")
(length(questionnaire$questions$name %>% hasdata)/length(questionnaire$questions$name)*100) %>% round %>% paste0("% questions matched")
#checking which question names made it through
questionnaire$questions %>% head
data.dependent.var = "what.region.is.the.assessment.being.conducted.in."
independent.var = "what.is.the.gender.of.the.respondent"
hypothesis.type="direct_reporting"
svyttest(data$`hh_profile/hhh_age` ~ data$`hh_profile/hhh_sex`, design = design)
variable.types <- "numeric"
choose.test(hypothesis.type = hypothesis.type, variable.types = variable.types)
source("./dependencies.R")
source("./analyse_indicator.R")
source("./map_scales.R")
source("./stats.R")
source("./plots.R")
library(reachR)
require(survey)
data<- reachR:::read.csv.auto.sep(file = "./reach_som_protection_assessment_hh_cleaneddata_feb_2018.csv")
populations<-load_samplingframe("./sf.csv",
sampling.frame.population.column="Population",
sampling.frame.stratum.column = "Camp_",
data.stratum.column = "overview/camp_name", return.stratum.populations = T)
questionnaire <- load_questionnaire(data, questions.file = "./questionscomma2.csv", choices.file = "./choices2.csv", choices.label.column.to.use = "english")
# percent of questions successfully matched:
(length(questionnaire$questions$name %>% hasdata)/length(questionnaire$questions$name)*100) %>% round %>% paste0("% questions matched") %>% cat
data.dependent.var = "what.region.is.the.assessment.being.conducted.in."
independent.var = "what.is.the.gender.of.the.respondent"
hypothesis.type="direct_reporting"
#sampling.strategy="stratified random"
questionnaire$questions$name %>% hasdata
data.dependent.var = "how.many.children.in.the.household.work."
independent.var = "what.is.the.gender.of.the.respondent"
hypothesis.type="direct_reporting"
find.data.types(data.dependent.var = data.dependent.var,independent.var = independent.var)
data.dependent.var
independent.var
data.type.dep = c()
data.type.indep = c()
data.type.dep = "categorical"
question_is_categorical(data.dependent.var) == T
data.dependent.var
questionnaire$questions$type[questionnaire$questions$name=="data.dependent.var"]
questionnaire$questions$name=="data.dependent.var"
questionnaire$questions$type[questionnaire$questions$name==data.dependent.var]
find.data.types(data.dependent.var = data.dependent.var,independent.var = independent.var)
questionnaire$questions$type[questionnaire$questions$name==independent.var]
questionnaire$questions$name==independent.var
independent.var
independent.var %in% names(data)
independent.var <-"Is this an IDP settlement?"
questionnaire$questions$type[questionnaire$questions$name==independent.var]
independent.var %in% names(data)
questionnaire$questions$name
independent.var <-"Is this an IDP settlement?" %>% (reachR:::to_alphanumeric_lowercase)
independent.var %in% names(data)
names(data)
# ALWAYS (or NEVER) use the reachR load functions. otherwise nothing matches anymore because we harmonise colnames internally
data<- load_data(file = "./reach_som_protection_assessment_hh_cleaneddata_feb_2018.csv")
independent.var <-"Is this an IDP settlement?" %>% (reachR:::to_alphanumeric_lowercase)
independent.var %in% names(data)
names(data)
# ALWAYS (or NEVER) use the reachR load functions. otherwise nothing matches anymore because we harmonise colnames internally
data<- load_data(file = "./reach_som_protection_assessment_hh_cleaneddata_feb_2018.csv")
data %>% glimpse
# make sure this works again when you start the next day (don't assume commands from other files have been run), e.g this one
# set wd to this script's folder
rm(list = ls())
this_script_path<-(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(this_script_path)
getwd()
####################
# run once
####################
# install.packages("data.table")
# .install_reachR(T)
####################
source("./dependencies.R")
source("./analyse_indicator.R")
source("./map_scales.R")
source("./stats.R")
source("./plots.R")
library(reachR)
require(survey)
####################
# LOAD FILES
####################
# ALWAYS (or NEVER) use the reachR load functions. otherwise nothing matches anymore because we harmonise colnames internally
data<- load_data(file = "./reach_som_protection_assessment_hh_cleaneddata_feb_2018.csv")
data %>% glimpse
populations<-load_samplingframe("./sf.csv",
sampling.frame.population.column="Population",
sampling.frame.stratum.column = "Camp_",
data.stratum.column = "overview/camp_name", return.stratum.populations = T)
questionnaire <- load_questionnaire(data, questions.file = "./questionscomma2.csv", choices.file = "./choices2.csv", choices.label.column.to.use = "english")
# percent of questions successfully matched:
(length(questionnaire$questions$name %>% hasdata)/length(questionnaire$questions$name)*100) %>% round %>% paste0("% questions matched") %>% cat
data.dependent.var = "how.many.children.in.the.household.work."
independent.var = "what.is.the.gender.of.the.respondent"
hypothesis.type="direct_reporting"
#sampling.strategy="stratified random"
independent.var <-"Is this an IDP settlement?" %>% (reachR:::to_alphanumeric_lowercase)
independent.var %in% names(data)
names(data)
# ALWAYS (or NEVER) use the reachR load functions. otherwise nothing matches anymore because we harmonise colnames internally
data<- load_data(file = "./reach_som_protection_assessment_hh_cleaneddata_feb_2018.csv")
data %>% glimpse
# ALWAYS (or NEVER) use the reachR load functions. otherwise nothing matches anymore because we harmonise colnames internally
data<- load_data(file = "./reach_som_protection_assessment_hh_cleaneddata_feb_2018_2.csv")
data %>% glimpse
# percent of questions successfully matched:
(length(questionnaire$questions$name %>% hasdata)/length(questionnaire$questions$name)*100) %>% round %>% paste0("% questions matched") %>% cat
# ALWAYS (or NEVER) use the reachR load functions. otherwise nothing matches anymore because we harmonise colnames internally
data<- load_data(file = "./reach_som_protection_assessment_hh_cleaneddata_feb_2018_2.csv")
data %>% glimpse
populations<-load_samplingframe("./sf.csv",
sampling.frame.population.column="Population",
sampling.frame.stratum.column = "Camp_",
data.stratum.column = "overview/camp_name", return.stratum.populations = T)
questionnaire <- load_questionnaire(data, questions.file = "./questionscomma2.csv", choices.file = "./choices2.csv", choices.label.column.to.use = "english")
# percent of questions successfully matched:
(length(questionnaire$questions$name %>% hasdata)/length(questionnaire$questions$name)*100) %>% round %>% paste0("% questions matched") %>% cat
data.dependent.var = "how.many.children.in.the.household.work."
independent.var = "what.is.the.gender.of.the.respondent"
hypothesis.type="direct_reporting"
find.data.types(data.dependent.var = data.dependent.var,independent.var = independent.var)
independent.var
independent.var <-"Is this an IDP settlement?" %>% (reachR:::to_alphanumeric_lowercase)
independent.var
independent.var %in% names(data)
questionnaire$questions$type[questionnaire$questions$name==data.dependent.var]
questionnaire$questions$type[questionnaire$questions$name==independent.var]
strata_of<-function(data){
return(data[,"overview/camp_name"])
}
"overview.camp.name" %in% names(data)
"overview.camp_name" %in% names(data)
variable.types <- "numeric"
choose.test(hypothesis.type = hypothesis.type, variable.types = variable.types)
independent.var <- "what.is.the.gender.of.the.respondent."
independent.var

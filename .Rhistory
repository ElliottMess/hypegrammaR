stop.speaking()
}
}
recordto("test.htm")
say("simple text")
rm(say)
recordto("test.htm")
say("simple text")
recordto<-function(file){
start.speaking<<-function(){
recorder.file<-file
if(exists(recorder.file)){
sink(recorder.file,append = T,split = T)
cat("<br>")
}
}
}
recordto("test.htm")
rm(start.speaking())
recordto("test.htm")
rm(start.speaking())
rm(start.speaking
rm(start.speaking)
recordto("test.htm")
say("simple text")
recordto<-function(file){
start.speaking<<-function(){
recorder.file<-file
print(recorder.file)
if(exists(recorder.file)){
sink(recorder.file,append = T,split = T)
cat("<br>")
}
}
}
recordto<-function(file){
recorder.file<-file
start.speaking<<-function(){
print(recorder.file)
if(exists(recorder.file)){
sink(recorder.file,append = T,split = T)
cat("<br>")
}
}
}
rm(start.speaking)
recordto("test.htm")
say("simple text")
recordto<-function(file){
recorder.file<-file
start.speaking<<-function(){
print(recorder.file)
if(recorder.file){
sink(recorder.file,append = T,split = T)
cat("<br>")
}
}
}
rm(start.speaking)
rm(start.speaking)
recordto("test.htm")
say("simple text")
rm(start.speaking)
recordto<-function(file){
recorder.file<-file
start.speaking<<-function(){
print(recorder.file)
if(recorder.file){
sink(recorder.file,append = T,split = T)
cat("<br>")
}
}
}
recordto<-function(file){
recorder.file<-file
start.speaking<<-function(){
print(recorder.file)
if(recorder.file){
sink(recorder.file,append = T,split = T)
cat("<br>")
}
}
}
rm(start.speaking)
recordto("test.htm")
say("simple text")
?exists
recordto<-function(file){
recorder.file<-file
start.speaking<<-function(){
if(exists("recorder.file")){
sink(recorder.file,append = T,split = T)
cat("<br>")
}
}
}
rm(start.speaking)
recordto("test.htm")
say("simple text")
scream("large headline")
shout("small headline")
test_table<-matrix(1:9,3,3)
say(test_table %>% kable)
require("dplyr")
test_table<-matrix(1:9,3,3)
say(test_table %>% kable)
require("knitr")
say(test_table %>% kable)
generic.speak<-function(x){
if(is.matrix(x) | is.table(x) | is.data.frame(x)){
kable(x)
} else{
cat(x)
}
}
say<-function(text){
start.speaking()
generic.speak(text)
stop.speaking()
}
scream<-function(text){
start.speaking()
cat("<h1>")
generic.speak(text)
cat("<h1>")
stop.speaking()
}
shout<-function(text){
start.speaking()
cat("<h2>")
generic.speak(text)
cat("<h2>")
stop.speaking()
}
stop.speaking<-function(){
cat("<br>")
sink()
}
recordto<-function(file){
recorder.file<-file
start.speaking<<-function(){
if(exists("recorder.file")){
sink(recorder.file,append = T,split = T)
cat("<br>")
}
}
}
recordto("test.htm")
say("simple text")
scream("large headline")
generic.speak<-function(x){
if(is.matrix(x) | is.table(x) | is.data.frame(x)){
kable(x)
} else{
cat(x)
}
}
recordto("test.htm")
say("simple text")
scream("large headline")
shout("small headline")
test_table<-matrix(1:9,3,3)
say(test_table)
matrix(1:9,3,3)
test_table<-matrix(1:9,3,3)
say(test_table)
say
require("knitr")
rm(start.speaking)
recordto("test.htm")
say("simple text")
scream("large headline")
shout("small headline")
test_table<-matrix(1:9,3,3)
say(test_table)
scream("that's all")
recordto<-function(file){
recorder.file<-file
start.speaking<<-function(){
if(exists("recorder.file")){
sink(recorder.file,append = T,split = T)
cat("<br>")
}
}
}
say<-function(text){
start.speaking()
generic.speak(text)
stop.speaking()
}
scream<-function(text){
start.speaking()
cat("<h1>")
generic.speak(text)
cat("<h1>")
stop.speaking()
}
shout<-function(text){
start.speaking()
cat("<h2>")
generic.speak(text)
cat("<h2>")
stop.speaking()
}
stop.speaking<-function(){
cat("<br>")
sink()
}
rewind<-function(){
if(exists(recorder.file)){
sink(recorder.file,append = F)
sink()
}
}
generic.speak<-function(x){
if(is.matrix(x) | is.table(x) | is.data.frame(x)){
kable(x)
} else{
cat(x)
}
}
require("knitr")
rm(start.speaking)
recordto("test.htm")
say("simple text")
scream("large headline")
shout("small headline")
test_table<-matrix(1:9,3,3)
say(test_table)
scream("that's all")
is.matrix(test_table)
generic.speak(test_table)
generic.speak<-function(x){
if(is.matrix(x) | is.table(x) | is.data.frame(x)){
kable(x,format="html") %>% print
} else{
cat(x)
}
}
test_table<-matrix(1:9,3,3)
say(test_table)
rm(start.speaking)
recordto("test.htm")
say("simple text")
scream("large headline")
shout("small headline")
test_table<-matrix(1:9,3,3)
is.matrix(test_table)
say(test_table)
scream("that's all")
generic.speak<-function(x){
if(is.matrix(x) | is.table(x) | is.data.frame(x)){
kable(x,format="html") %>% print
} else if(is.list(x)){
lapply(x,generic.speak)
}else{
cat(x)
}
}
generic.speak<-function(x){
if(is.matrix(x) | is.table(x) | is.data.frame(x)){
kable(x,format="html") %>% print
} else if(is.list(x)){
for(item in 1:length(x)){
shout(names(item)[x]){
say(item)
}
}
}else{
cat(x)
}
}
generic.speak<-function(x){
if(is.matrix(x) | is.table(x) | is.data.frame(x)){
kable(x,format="html") %>% print
} else if(is.list(x)){
for(item in 1:length(x)){
shout(names(item)[x])
say(item[[x]])
}
}else{
cat(x)
}
}
require("knitr")
# recordto("asdf.htm")
# say("asdf")
# shout("asdf")
# scream("asdf")
#
# say(matrix_or_df_or_)
.recordto<-function(file){
recorder.file<-file
start.speaking<<-function(){
if(exists("recorder.file")){
sink(recorder.file,append = T,split = T)
cat("<br>")
}
}
}
.say<-function(text){
start.speaking()
generic.speak(text)
stop.speaking()
}
.shout<-function(text){
start.speaking()
cat("<h2>")
generic.speak(text)
cat("<h2>")
stop.speaking()
}
.scream<-function(text){
start.speaking()
cat("<h1>")
generic.speak(text)
cat("<h1>")
stop.speaking()
}
stop.speaking<-function(){
cat("<br>")
sink()
}
rewind<-function(){
if(exists(recorder.file)){
sink(recorder.file,append = F)
sink()
}
}
generic.speak<-function(x){
if(is.matrix(x) | is.table(x) | is.data.frame(x)){
kable(x,format="html") %>% print
} else if(is.list(x)){
for(item in 1:length(x)){
shout(names(item)[x])
say(item[[x]])
}
}else{
cat(x)
}
}
recordto("filename.htm")
say("string_or_vector_or_matrix_or_df_or_list")
shout("string_or_vector_or_matrix_or_df_or_list")
scream("string_or_vector_or_matrix_or_df_or_list")
require("knitr")
# recordto("filename.htm")
#   say(string_or_vector_or_matrix_or_df_or_list)
#   shout(string_or_vector_or_matrix_or_df_or_list)
#   scream(string_or_vector_or_matrix_or_df_or_list)
.recordto<-function(file){
recorder.file<-file
start.speaking<<-function(){
if(exists("recorder.file")){
sink(recorder.file,append = T,split = T)
cat("<br>")
}
}
}
.say<-function(text){
start.speaking()
generic.speak(text)
stop.speaking()
}
.shout<-function(text){
start.speaking()
cat("<h2>")
generic.speak(text)
cat("<h2>")
stop.speaking()
}
.scream<-function(text){
start.speaking()
cat("<h1>")
generic.speak(text)
cat("<h1>")
stop.speaking()
}
stop.speaking<-function(){
cat("<br>")
sink()
}
rewind<-function(){
if(exists(recorder.file)){
sink(recorder.file,append = F)
sink()
}
}
generic.speak<-function(x){
if(is.matrix(x) | is.table(x) | is.data.frame(x)){
kable(x,format="html") %>% print
} else if(is.list(x)){
for(item in 1:length(x)){
shout(names(item)[x])
say(item[[x]])
}
}else{
cat(x)
}
}
rm(list=ls())
this_script_path<-(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(this_script_path)
setwd("./../..")
source("./test_data/bgd/bgd_analysis_data_load_and_prepare.R")
data<-load_assessment_bgd()
analysisplan<-data.frame(
repeat.for="VAR.11...enter.the.survey.site.",
independent.var="VAR.20...what.is.the.gender.of.the.head.of.the.family.",
dependent.var=names(data),
hypothesis.type="group_difference",
case=paste0("CASE_group_difference_",ifelse(data %>% sapply(is.numeric),"numerical","categorical"),"_categorical")
,stringsAsFactors = F)
analysisplan <- analysisplan[analysisplan[,"dependent.var"]!= analysisplan[,"independent.var"],]
results<-apply_data_analysis_plan(data,analysisplan)
result_table<-map_list_of_results_to_dataframe(results)
result_table$indicator <- gsub("VAR\\.[0-9]*\\.\\.\\.","",result_table$indicator)
result_table$indicator <- gsub("\\."," ",result_table$indicator)
split_by_gender<-result_table %>% split.data.frame(result_table$independent.var.value)
comparison_horizontal<-data.frame(split_by_gender$`Male`,"female"=split_by_isother$`Female`$numbers)
comparison_horizontal<-data.frame(split_by_gender$`Male`,"female"=split_by_isother$`Female`$numbers)
comparison_horizontal<-data.frame(split_by_gender$`Male`,"female"=split_by_gender$`Female`$numbers)
comparison_horizontal<-data.frame(split_by_gender$`Male`,"female"=split_by_gender$`Female`$numbers)
comparison_horizontal$absolute.difference<-comparison_horizontal$numbers - comparison_horizontal$female
comparison_horizontal$percent.difference<- comparison_horizontal$absolute.difference / comparison_horizontal$female
comparison_horizontal$percent.difference[grep("Pearson's",comparison_horizontal$test.type)]<-NA
comparison_horizontal$percent.difference
comparison_horizontal<-data.frame(split_by_gender$`Male`,"female"=split_by_gender$`Female`$numbers)
comparison_horizontal$absolute.difference<-comparison_horizontal$numbers - comparison_horizontal$female
comparison_horizontal$percent.difference<- comparison_horizontal$absolute.difference / comparison_horizontal$female
comparison_horizontal$percent.difference
comparison_horizontal$percent.difference[grep("Pearson's",comparison_horizontal$test.type)]<-NA
comparison_horizontal$percent.difference
comparison_horizontal$adjusted.p.value<-comparison_horizontal$p.value*nrow(analysisplan)
comparison_horizontal$significant.at.005<-comparison_horizontal$adjusted.p.value<0.05
diff_comb<-comparison_horizontal$percent.difference
diff_comb[is.na(diff_comb)]<-comparison_horizontal$absolute.difference[is.na(diff_comb)]
comparison_horizontal$difference.over.7.percent <- abs(diff_comb)>0.07
comparison_horizontal$adjusted.p.value<-comparison_horizontal$p.value*nrow(analysisplan)
comparison_horizontal$significant.at.005<-comparison_horizontal$adjusted.p.value<0.05
diff_comb<-comparison_horizontal$percent.difference
diff_comb[is.na(diff_comb)]<-comparison_horizontal$absolute.difference[is.na(diff_comb)]
result_table %>% write.csv("gender_comparison.csv")
result_table %>% write.csv("comparison.csv")
diff_comb %>% write.csv("comparison.csv")
diff_comb %>% write.csv("comparison.csv")
diff_comb %>% write.csv("comparison_raw.csv")
diff_comb
comparison_horizontal %>% write.csv("comparison_raw.csv")
comparison_horizontal %>% write.csv("comparison_raw.csv")
comparison_horizontal %>% write.csv("comparison_raw.csv")
comparison_horizontal %>% glimpse
comparison_horizontal %>% write.csv("comparison_raw.csv")
comparison_horizontal %>% write.csv("comparison_raw.csv")
rm(list=ls())
this_script_path<-(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(this_script_path)
setwd("./../..")
source("./test_data/bgd/bgd_analysis_data_load_and_prepare.R")
data<-load_assessment_bgd()
camps <- select_mulitpleify(data$VAR.11...enter.the.survey.site.,keep.values=TRUE)
data <- cbind(data, camps)
# data.plan.per.camp <- many_plans(unique(data$VAR.11...enter.the.survey.site.))
# data.plan.per.camp <- data.plan.per.camp[c(1,2)]
analysisplan<-map_to_analysis_plan_all_vars_as_dependent(each.x.as.independent.in.var = "VAR.11...enter.the.survey.site.",data = data)
results <- apply_data_analysis_plan(data,analysisplan)
result_table <- map_list_of_results_to_dataframe(results)
is.other<-result_table$independent.var.value=="other"
split_by_isother <- result_table %>% split.data.frame(is.other)
comparison_horizontal<-data.frame(split_by_isother$`FALSE`,"other"=split_by_isother$`TRUE`$numbers)
comparison_horizontal$absolute.difference<-comparison_horizontal$numbers - comparison_horizontal$other
comparison_horizontal$percent.difference<- comparison_horizontal$absolute.difference / comparison_horizontal$other
comparison_horizontal$percent.difference[grep("Pearson's",comparison_horizontal$test.type)]<-NA
# comparison_horizontal %>% write.csv("camp_comparison.csv")
comparison_horizontal$adjusted.p.value<-comparison_horizontal$p.value*nrow(analysisplan)
comparison_horizontal$significant.at.005<-comparison_horizontal$adjusted.p.value<0.05
diff_comb<-comparison_horizontal$percent.difference
diff_comb[is.na(diff_comb)]<-comparison_horizontal$absolute.difference[is.na(diff_comb)]
comparison_horizontal$difference.over.7.percent <- abs(diff_comb)>0.07
comparison_horizontal$significant.and.large.difference<-comparison_horizontal$difference.over.7.percent & comparison_horizontal$significant.at.005
comparison_horizontal %>% write.csv("camp_comparison2.csv")
read.csv("./camp_comparison_all.csv") ->rescheck
rescheck$independent.var.value %>% table
analysisplan$independent.var %>% table
data %>% names
results %>% length
results %>% names %>% table
map_list_of_results_to_dataframe<-function(analysis_indicator_results){
sumstatlist <- analysis_indicator_results%£%"summary.statistic"
getpval<-function(result){
if(is.null(result)){return(NA)}
if(!is.list(result)){return(NA)}
if(is.null(result$hypothesis.test)){return(result$message)}
if(is.null(result$hypothesis.test$result)){return(result$message)}
if(is.null(result$hypothesis.test$result$p.value)){return(result$message)}
return(result$hypothesis.test$result$p.value)
}
sumstats <- lapply(1:length(sumstatlist),function(x){
if (!is.null(x)) {
cbind(indicator=name,"p value"=getpval(analysis_indicator_results[[x]]),"test type"= analysis_indicator_results[[x]]$hypothesis.test$name, sumstatlist[[x]])
}
})  %>%  do.call(rbind,.)
return(sumstats)
}
result_table <- map_list_of_results_to_dataframe(results)
source('C:/Users/Visitor/hypegrammaR/test_data/bgd/bgd_analysis_functions.R')
result_table <- map_list_of_results_to_dataframe(results)
version()
version
install.packages("rJava")
require("rJava")
R.Version()
